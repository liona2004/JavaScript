/* Циклы - loops выполняют однотипное действие много раз, многократное повторение одного участка кода
Цикл while: код из тела этого цикла выполняется, пока условие condition истинно
Одно  выполнение тела цикла называется Итерация
*/
while (condition) {
// тело цикла
}
function fourSeven(n){
  while (n === 4) {
    return 7;
  } while (n === 7) {
    return 4;
  } while (n !== 4 && n!== 7) {
    return 0;
  }
}

/* Цикл for состоит из трёх необязательных выражений в круглых скобках
for (начало; условие; шаг) {
  // тело цикла break; // директива break - досрочное прекращение работы цикла и начинает выполняться код после закрывающейся фигурной скобки
}

/* Цикл for состоит из трёх необязательных выражений в круглых скобках
for (начало; условие; шаг) {
  // тело цикла continue; // директива continue - прерывание выполнения тела цикла и переход к следующей итерации. То есть пока условие ложно цикл продолжается, 
  а когда оно истинно выполняется директива continue и выполнение тла цикла прерывается, следующая строка не будет работать
}

for (a; b; c), where a is the initialization statement (инициализация), b is the condition statement, and c is the final expression(финальное выражение).
условие - это выражение, которое выполняется при каждой итерации цикла. Если выражение истинно, цикл выполняется. Если ложно, выполнение переходит к 
первому выражению в теле цикла
финальное выражение (шаг) - выполняющееся в конце итерации после выполнения тела
инициализация - или определение переменных. Это выражение может объявлять новые переменные. Начало выполняется только один раз при первой итерации. Встроенное объявление
переменной - значит при попытке вызвать переменную вне цикла произойдет ошибка. Но можно объявить переменную раньше и внутри цикла просто присвоить значение переменной
*/ 
const myArray = [];

for (var a = 1; a <= 5; a++) {
  myArray.push(a); // .push потому что при первой итерации буддет 1 значение, а при второй итерации второе значение уходит в конец после первого и так с последующими
}

/* оператор сложения с присваиванием += Добаваляет значение правого операнда к переменной и присваивает переменной результат
const myArray = [];

for (var s = 1; s <= 9; s += 2) {
  myArray.push(s);
}

Или оператор вычитание с присваиванием -=
const myArray = [];

for (var m = 9; m >= 1; m -= 2) {
  myArray.push(m);
}
*/

const myArr = [2, 3, 4, 5, 6];

var total = 0;
for (var i = 0; i < myArr.length; i++ ) {
  total += myArr[i];
}
console.log(total); /* на выходе получается 20. Почему? происходит сложение чисел в массиве с условием, что прибавляемая i меньше длины массива, 
т.к. счет индексов начинается с 0 и каждую итерацию индекс i увеличивается на 1 i++. А в конце к переменной со зачение 0 прибавляется i с разным индексом */

/* цикл do while сначала выполнит тело, а только потом проверит условие, и пока значение true, циикл будет выполняться. Цикл подходит, если необходимо выполнить тело
хотя бы один раз */
do {
  console.log(num); // тело цикла
  num++;
} while (num < 5); // условие condition




function alternate(n, firstValue, secondValue){
  var theArray = [];
  for (var i = 0; i < n; i++) { // так как n не array писать length не нужно, i будет 0 потом перескочит на 1 потом 2 3 4 < 5, если n = 5
    theArray.push(i % 2 === 0 ? firstValue : secondValue); // получается первый индекс 0 поделить на 2 нет остатка т.к 0/2 = 0, поэтому пишем firstValue, второй индекс 1/2 = 0,5 остаток поэтому secondValue
  }
  return theArray;
  
}


const prices = [19.99, 4.95, 25, 3.50];
let new_prices = [];
for(let i=0; i < prices.length; i++) {
   new_prices.push(prices[i] * 1.06);
}
//ИЛИ
const prices = [19.99, 4.95, 25, 3.50];
let new_prices = prices.map(price => price * 1.06);



